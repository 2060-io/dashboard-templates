#   dtst:name of variable in orchestrator:priority in variable form:what to replace
# Namespace

apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace }}
  
---

# Service

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.dtsName }}
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: {{ .Values.dtsName }}
  ports:
  - name: didcomm
    port: 3001
    targetPort: 3001
    protocol: TCP
  - name: admin
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: q
    port: 2903
    targetPort: 2903
    protocol: TCP
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP

---


# Ingress admin

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.dtsName }}-admin
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/whitelist-source-range: "198.50.185.225/32"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - a.{{ .Values.dtsName }}.demos.dev.2060.io
      secretName: admin.{{ .Values.dtsName }}.demos.dev.2060.io-cert
  rules:
    - host: a.{{ .Values.dtsName }}.demos.dev.2060.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                 name: {{ .Values.dtsName }}
                 port:
                   number: 3000

---


# Ingress public

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.dtsName }}-public
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ .Values.dtsName }}.demos.dev.2060.io
      secretName: public.{{ .Values.dtsName }}.demos.dev.2060.io-cert
  rules:
    - host: {{ .Values.dtsName }}.demos.dev.2060.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                 name: {{ .Values.dtsName }}
                 port:
                   number: 3001

---

# Ingress ds

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.dtsName }}-ds
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/whitelist-source-range: "51.79.89.27/32"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - q.{{ .Values.dtsName }}.demos.dev.2060.io
      secretName: ds-{{ .Values.dtsName }}.demos.dev.2060.io-cert
  rules:
    - host: q.{{ .Values.dtsName }}.demos.dev.2060.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                 name: {{ .Values.dtsName }}
                 port:
                   number: 2903


---


apiVersion: apps/v1
kind: StatefulSet
metadata:
   name: {{ .Values.dtsName }}
   namespace: {{ .Values.namespace }}
   labels:
      app: nginx
spec:
   serviceName: "{{ .Values.dtsName }}"
   replicas: {{ .Values.replicas }}
   selector:
      matchLabels:
         app: {{ .Values.dtsName }}
   template:
      metadata:
         labels:
            app: {{ .Values.dtsName }}
      spec:
         containers:
         -  name: {{ .Values.dtsName }}-sa-container
            image: io2060/2060-service-agent:main
            imagePullPolicy: Always
            env:
            - name: AGENT_ENDPOINT
              value: "wss://{{ .Values.dtsName }}.demos.dev.2060.io:443"
            - name: AGENT_NAME
              value: {{ .Values.agentName }}
            - name: AGENT_INVITATION_IMAGE_URL
              value: "https://i.{{ .Values.dtsName }}.demos.dev.2060.io/avatar.png"
            - name: EVENTS_BASE_URL
              value: "http://localhost:2903"
            - name: AGENT_PUBLIC_DID
              value: "did:web:{{ .Values.dtsName }}.demos.dev.2060.io"
            - name: ANONCREDS_SERVICE_BASE_URL
              value: "https://{{ .Values.dtsName }}.demos.dev.2060.io"
              
            volumeMounts:
            - name: {{ .Values.dtsName }}-sa-pv-main
              mountPath: /root/.afj
            ports:
            -  containerPort: 3000
            -  containerPort: 3001
         -  name: {{ .Values.dtsName }}-backend-container
            image: io2060/2060-demos-email-verification-service:main
            imagePullPolicy: Always
            env:
            - name: SERVICE_AGENT_ADMIN_BASE_URL
              value: "http://localhost:3000"
            - name: PUBLIC_BASE_URL
              value: "https://{{ .Values.dtsName }}.demos.dev.2060.io"
            - name: PNVS_SERVICE_AGENT_ADMIN_BASE_URL
              value: "https://a.{{ .Values.dtsName }}.demos.dev.2060.io"
            - name: DEBUG
              value: "1"
            - name: QUARKUS_HTTP_PORT
              value: "2903"
            - name: IO_TWENTYSIXTY_SA_RES_C_MESSAGERESOURCE_MP_REST_URL
              value: "http://localhost:3000"
            - name: IO_TWENTYSIXTY_SA_RES_C_CREDENTIALTYPERESOURCE_MP_REST_URL
              value: "http://localhost:3000"
            - name: QUARKUS_SWAGGER_UI_ALWAYS_INCLUDE
              value: "1"
            - name: IO_TWENTYSIXTY_EMAILVS_SENDMAIL_FROM
              value: "root@gmail.com"
            - name: IO_TWENTYSIXTY_EMAILVS_SENDMAIL_SMTP_HOSTNAME
              value: "smtp.gmail.com"
            - name: IO_TWENTYSIXTY_EMAILVS_SENDMAIL_SMTP_PORT
              value: "587"
            - name: IO_TWENTYSIXTY_EMAILVS_SENDMAIL_SMTP_USERNAME
              value: "root@gmail.com"
            - name: IO_TWENTYSIXTY_EMAILVS_SENDMAIL_SMTP_PASSWORD
              value: {{ .Values.emailPWD }}
            - name: QUARKUS_DATASOURCE_USERNAME
              value: "emailvs" 
            - name: QUARKUS_DATASOURCE_PASSWORD
              value: {{ .Values.dbPWD }}
            ports:
            -  containerPort: 2903
         -  name: postgres
            image: postgres:15.2
            imagePullPolicy: Always
            env:
            - name: POSTGRES_PASSWORD
              value: {{ .Values.dbPWD }}
            - name: POSTGRES_USER
              value: "emailvs"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            ports:
            -  containerPort: 5432
            volumeMounts:
            - name: {{ .Values.dtsName }}-pg-pv-main
              mountPath: /var/lib/postgresql/data
   volumeClaimTemplates:
   - metadata:
       name: {{ .Values.dtsName }}-sa-pv-main
     spec:
       storageClassName: csi-cinder-classic
       accessModes:
       - "ReadWriteOnce"
       resources:
         requests:
           storage: 1Gi
   - metadata:
       name: {{ .Values.dtsName }}-pg-pv-main
     spec:
       storageClassName: csi-cinder-classic
       accessModes:
       - "ReadWriteOnce"
       resources:
         requests:
           storage: 1Gi
